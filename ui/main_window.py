#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Janela principal do aplicativo de r√°dio.
CORRIGIDO: Caminho da pasta AUDIO para usar RadioTeste diretamente.
"""

import os
from datetime import datetime, timedelta
from pathlib import Path
from PyQt6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                            QLabel, QPushButton, QListWidget,
                            QTableWidget, QTableWidgetItem, QHeaderView,
                            QMessageBox, QFileDialog, QMenu,QApplication)
from PyQt6.QtCore import Qt, QTimer, QSize, QPoint
from PyQt6.QtGui import QFont, QIcon, QAction, QColor

from services.player_service import PlayerService
from services.queue_service import QueueService
from ui.dialogs import AddMessageDialog, MessageImportDialog


# Importa√ß√£o condicional para evitar erro se n√£o existir
try:
    from ui.radio_source_dialog import RadioSourceDialog
except ImportError:
    print("‚ö† Arquivo radio_source_dialog.py n√£o encontrado - fun√ß√£o de configura√ß√£o de fonte desabilitada")
    RadioSourceDialog = None




class RadioPlayerWindow(QMainWindow):
    """
    Janela principal do aplicativo de r√°dio.
    Cont√©m a interface completa e coordena os servi√ßos.
    """
    
    def __init__(self):
        """Inicializa a janela principal."""
        super().__init__()

        self._updating_status = False
        self._updating_table = False
        self._is_closing = False
        
        # Configura√ß√µes da janela
        self.setWindowTitle("Player de R√°dio com Mensagens")
        self.setMinimumSize(800, 600)
        
        # Determina o caminho correto da pasta atual
        # Se estivermos em ui/, volta para a pasta pai (RadioTeste)
        # Se estivermos em RadioTeste/, usa diretamente
        current_file_dir = Path(__file__).resolve().parent
        
        if current_file_dir.name == "ui":
            # Estamos na pasta ui/, volta para RadioTeste
            project_dir = current_file_dir.parent
        else:
            # Estamos diretamente na pasta do projeto
            project_dir = current_file_dir
        
        self.messages_path = project_dir / "AUDIO"
        self.config_dir = project_dir / "config"
        
        # Define o arquivo de persist√™ncia da fila
        def get_queue_file_path():
            try:
                base = os.getenv('LOCALAPPDATA') or os.getenv('APPDATA') or os.path.expanduser("~")
                app_data_dir = Path(base) / "JB_FM_Player"
                app_data_dir.mkdir(parents=True, exist_ok=True)
                return app_data_dir / "queue_state.json"
            except Exception as e:
                print(f"‚ö† Erro ao definir pasta segura: {e}")
                return Path("queue_state.json")  # fallback

        self.queue_file_path = get_queue_file_path()
        print(f"üíæ Fila ser√° salva em: {self.queue_file_path}")
        
        # Cria os diret√≥rios se n√£o existirem
        self.messages_path.mkdir(parents=True, exist_ok=True)
        self.config_dir.mkdir(parents=True, exist_ok=True)
        
        # Informa qual pasta est√° sendo usada
        print(f"üìÇ Pasta do projeto: {project_dir}")
        print(f"üìÅ Pasta de mensagens: {self.messages_path}")
        print(f"‚öôÔ∏è Pasta de configura√ß√£o: {self.config_dir}")
        
        # Volume normal da r√°dio (100%)
        self.normal_radio_volume = 100
        # Volume baixo para quando as mensagens estiverem tocando (5%)
        self.lowered_radio_volume = 5
        
        # Inicializa servi√ßos
        self.player_service = PlayerService(self.config_dir, self.messages_path)
        self.queue_service = QueueService(self.queue_file_path)  # Passa o caminho para persist√™ncia
        
        # Configura a interface - DEVE SER EXECUTADO ANTES de load_messages()
        self.init_ui()
        
        # Configurar o callback para atualizar a interface
        self.queue_service.update_callback = self.update_queue_table
        
        # MODIFICADO: Timer de atualiza√ß√£o mais r√°pido para tempo real
        self.update_timer = QTimer()
        self.update_timer.setInterval(250)  # 100ms = 10x por segundo para atualiza√ß√£o suave
        self.update_timer.timeout.connect(self.update_status)
        self.update_timer.start()
        
        # Timer espec√≠fico para atualiza√ß√£o da tabela (ainda mais frequente)
        self.table_timer = QTimer()
        self.table_timer.setInterval(500)  # 200ms = 5x por segundo s√≥ para a tabela
        self.table_timer.timeout.connect(self.update_queue_table_realtime)
        self.table_timer.start()

         # Inicializa o gerenciador da fila
        from services.message_queue_manager import MessageQueueManager
        self.queue_manager = MessageQueueManager(self.queue_service, self.player_service)
        
        # Inicia o gerenciador
        self.queue_manager.start()
        print("üéØ Sistema de fila autom√°tica ativado")
        
        # Carrega a lista de mensagens - DEVE SER EXECUTADO AP√ìS init_ui()
        self.load_messages()
        
        # Atualiza a tabela da fila para mostrar as mensagens carregadas
        self.update_queue_table()

    def safe_update_status(self):
        """
        NOVA FUN√á√ÉO: Atualiza√ß√£o segura do status evitando concorr√™ncia.
        """
        if self._is_closing or self._updating_status:
            return
            
        self._updating_status = True
        try:
            self.update_status()
        finally:
            self._updating_status = False

    def safe_update_table(self):
        """
        NOVA FUN√á√ÉO: Atualiza√ß√£o segura da tabela evitando concorr√™ncia.
        """
        if self._is_closing or self._updating_table:
            return
            
        self._updating_table = True
        try:
            self.update_queue_table_realtime()
        finally:
            self._updating_table = False

    def update_queue_table_realtime(self):
        """
        Atualiza√ß√£o em tempo real apenas da coluna de tempo - VERS√ÉO CORRIGIDA.
        """
        # Verificar se estamos fechando ou se a tabela est√° sendo modificada
        if self._is_closing or not hasattr(self, 'queue_table'):
            return
            
        if self.queue_table.rowCount() == 0:
            return
        
        # Usar blockSignals para evitar eventos durante atualiza√ß√£o
        self.queue_table.blockSignals(True)
        
        try:
            items = self.queue_service.get_queue_items()
            if not items or len(items) != self.queue_table.rowCount():
                # Se a estrutura mudou, faz atualiza√ß√£o completa
                self.update_queue_table()
                return
            
            current_time = datetime.now()
            
            # Atualiza apenas a coluna de tempo (coluna 3)
            for i, message in enumerate(items):
                if i >= self.queue_table.rowCount():
                    break
                    
                delta = message.next_play_time - current_time
                delta_seconds = delta.total_seconds()
                
                # Cria o item de status atualizado
                if message.is_pending:
                    status_text = "‚è≥ Aguardando vez"
                    color = QColor(128, 128, 128)  # Cinza
                elif delta_seconds <= 0:
                    # J√° passou da hora ou est√° na hora
                    if abs(delta_seconds) < 5:  # Dentro de 5 segundos
                        status_text = "üî¥ TOCANDO AGORA!"
                        color = QColor(255, 0, 0)  # Vermelho
                    else:
                        status_text = "üü¢ PRONTA!"
                        color = QColor(0, 180, 0)  # Verde
                else:
                    # Ainda n√£o chegou a hora - CONTAGEM REGRESSIVA
                    if delta_seconds < 60:
                        # Menos de 1 minuto - s√≥ segundos
                        time_str = f"‚è∞ {int(delta_seconds)}s"
                        color = QColor(255, 140, 0)  # Laranja
                    elif delta_seconds < 3600:
                        # Menos de 1 hora - minutos e segundos
                        minutes = int(delta_seconds // 60)
                        seconds = int(delta_seconds % 60)
                        time_str = f"‚è∞ {minutes}m {seconds}s"
                        color = QColor(0, 100, 255)  # Azul
                    else:
                        # Mais de 1 hora - s√≥ hor√°rio
                        time_str = f"üïê {message.next_play_time.strftime('%H:%M:%S')}"
                        color = QColor(100, 100, 100)  # Cinza escuro
                    
                    status_text = time_str
                
                # Atualiza apenas se o texto mudou (otimiza√ß√£o)
                current_item = self.queue_table.item(i, 3)
                if current_item and current_item.text() != status_text:
                    current_item.setText(status_text)
                    current_item.setForeground(color)
                    
        finally:
            # Sempre reativar sinais
            self.queue_table.blockSignals(False)
    
    def init_ui(self):
        """Inicializa a interface da janela principal."""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Layout principal
        main_layout = QVBoxLayout()
        
        # ===== Cabe√ßalho com informa√ß√µes de status =====
        header_layout = QVBoxLayout()
        
        # T√≠tulo com configura√ß√£o de fonte
        title_layout = QHBoxLayout()
        
        title_label = QLabel("Sound Player Detel")
        title_label.setFont(QFont('Arial', 18, QFont.Weight.Bold))
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_layout.addWidget(title_label, 1)  # Adicionado stretch factor 1
        
        # Bot√£o de configura√ß√£o de fonte - s√≥ aparece se arquivo existir
        if RadioSourceDialog is not None:
            self.source_button = QPushButton("Configurar Fonte")
            self.source_button.setToolTip("Configurar fonte de r√°dio (Internet/Tunner)")
            self.source_button.clicked.connect(self.configure_radio_source)
            title_layout.addWidget(self.source_button)
        else:
            # Bot√£o desabilitado se n√£o houver o arquivo
            self.source_button = QPushButton("Configurar Fonte (Indispon√≠vel)")
            self.source_button.setEnabled(False)
            self.source_button.setToolTip("Arquivo radio_source_dialog.py n√£o encontrado")
            title_layout.addWidget(self.source_button)
        
        header_layout.addLayout(title_layout)
        
        # Mostrar a fonte atual
        self.source_label = QLabel()
        self.source_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.update_source_label()
        header_layout.addWidget(self.source_label)
        
        # MODIFICADO: Mostra a pasta AUDIO sendo usada
        self.messages_path_label = QLabel(f"üìÅ Pasta de √°udios: {self.messages_path}")
        self.messages_path_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.messages_path_label.setStyleSheet("color: blue; font-weight: bold;")
        header_layout.addWidget(self.messages_path_label)
        
        # Status
        self.mode_label = QLabel("Modo: R√°dio")
        self.mode_label.setFont(QFont('Arial', 12))
        self.mode_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        header_layout.addWidget(self.mode_label)
        
        self.status_label = QLabel("Status: Parado")
        self.status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        header_layout.addWidget(self.status_label)
        
        main_layout.addLayout(header_layout)
        
        # ===== √Årea central - Mensagens e Fila =====
        central_layout = QHBoxLayout()
        
        # ----- Painel de mensagens dispon√≠veis -----
        messages_panel = QVBoxLayout()
        
        # MODIFICADO: T√≠tulo mostra a pasta sendo usada
        messages_title = QLabel(f"Mensagens Dispon√≠veis (Pasta: {self.messages_path.name}):")
        messages_title.setFont(QFont('Arial', 10, QFont.Weight.Bold))
        messages_panel.addWidget(messages_title)
        
        # Lista de mensagens
        self.messages_list = QListWidget()
        self.messages_list.setSelectionMode(QListWidget.SelectionMode.SingleSelection)
        self.messages_list.itemDoubleClicked.connect(self.play_selected_message)
        messages_panel.addWidget(self.messages_list)
        
        # ADICIONADO: Label com contagem de arquivos
        self.file_count_label = QLabel("Carregando...")
        self.file_count_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.file_count_label.setStyleSheet("color: gray; font-style: italic;")
        messages_panel.addWidget(self.file_count_label)
        
        # Bot√µes de gerenciamento de mensagens
        messages_buttons = QHBoxLayout()
        
        add_queue_button = QPushButton("Adicionar √† Fila")
        add_queue_button.clicked.connect(self.add_to_queue)
        messages_buttons.addWidget(add_queue_button)
        
        import_button = QPushButton("Importar Mensagem")
        import_button.clicked.connect(self.import_message)
        messages_buttons.addWidget(import_button)
        
        remove_file_button = QPushButton("Remover Arquivo")
        remove_file_button.clicked.connect(self.remove_message_file)
        messages_buttons.addWidget(remove_file_button)
        
        # MODIFICADO: Bot√£o para abrir especificamente a pasta AUDIO
        open_folder_button = QPushButton("Abrir Pasta AUDIO")
        open_folder_button.setToolTip(f"Abrir pasta {self.messages_path} no explorador")
        open_folder_button.clicked.connect(self.open_messages_folder)
        open_folder_button.setStyleSheet("QPushButton { background-color: #4CAF50; color: white; font-weight: bold; }")
        messages_buttons.addWidget(open_folder_button)
        
        messages_panel.addLayout(messages_buttons)
        
        # ADICIONADO: Bot√£o para atualizar lista
        refresh_layout = QHBoxLayout()
        refresh_button = QPushButton("üîÑ Atualizar Lista")
        refresh_button.setToolTip("Recarregar arquivos da pasta AUDIO")
        refresh_button.clicked.connect(self.refresh_messages)
        refresh_layout.addWidget(refresh_button)
        refresh_layout.addStretch()  # Empurra o bot√£o para a esquerda
        messages_panel.addLayout(refresh_layout)
        
        central_layout.addLayout(messages_panel)
        
        # ----- Painel da fila de reprodu√ß√£o -----
        queue_panel = QVBoxLayout()
        
        queue_panel.addWidget(QLabel("Fila de Reprodu√ß√£o:"))
        
        # CORRIGIDO: Configura√ß√£o aprimorada da tabela
        self.queue_table = QTableWidget()
        self.queue_table.setColumnCount(4)

        # Define os cabe√ßalhos das colunas
        headers = ["Arquivo", "Prioridade", "Intervalo", "Pr√≥xima Execu√ß√£o"]
        self.queue_table.setHorizontalHeaderLabels(headers)

        # NOVA ABORDAGEM: Configura√ß√£o mais inteligente das colunas
        header = self.queue_table.horizontalHeader()

        # Coluna 0 (Arquivo) - Tamanho m√≠nimo garantido, pode expandir
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Interactive)
        self.queue_table.setColumnWidth(0, 250)  # Largura inicial generosa

        # Coluna 1 (Prioridade) - Tamanho fixo pequeno
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Fixed)
        self.queue_table.setColumnWidth(1, 80)

        # Coluna 2 (Intervalo) - Tamanho fixo m√©dio
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Fixed)
        self.queue_table.setColumnWidth(2, 100)

        # Coluna 3 (Pr√≥xima Execu√ß√£o) - Tamanho fixo largo
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Fixed)
        self.queue_table.setColumnWidth(3, 180)  # Espa√ßo para contagem regressiva

        # MELHORIAS: Configura√ß√µes visuais e funcionais
        self.queue_table.setAlternatingRowColors(True)
        self.queue_table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        self.queue_table.verticalHeader().setVisible(False)

        # Altura adequada do cabe√ßalho
        self.queue_table.horizontalHeader().setMinimumHeight(32)

        # Fonte do cabe√ßalho
        header_font = QFont('Arial', 10, QFont.Weight.Bold)
        self.queue_table.horizontalHeader().setFont(header_font)

        # Altura das linhas
        self.queue_table.verticalHeader().setDefaultSectionSize(28)

        # Permite redimensionar colunas manualmente
        header.setSectionsClickable(True)
        header.setHighlightSections(True)

        # Scroll horizontal quando necess√°rio
        self.queue_table.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)

        # NOVO: Largura m√≠nima da tabela
        self.queue_table.setMinimumWidth(650)

        # NOVO: Tooltip para ajudar o usu√°rio
        self.queue_table.setToolTip("üí° Dica: Voc√™ pode redimensionar as colunas arrastando as bordas dos cabe√ßalhos")
                
        queue_panel.addWidget(self.queue_table)
        
        # Bot√µes da fila
        queue_buttons = QHBoxLayout()
        
        remove_queue_button = QPushButton("Remover da Fila")
        remove_queue_button.clicked.connect(self.remove_from_queue)
        queue_buttons.addWidget(remove_queue_button)
        
        clear_queue_button = QPushButton("Limpar Fila")
        clear_queue_button.clicked.connect(self.clear_queue)
        queue_buttons.addWidget(clear_queue_button)
        
        queue_panel.addLayout(queue_buttons)
        
        central_layout.addLayout(queue_panel)
        
        main_layout.addLayout(central_layout)
        
        # ===== Controles de reprodu√ß√£o =====
        playback_layout = QHBoxLayout()
        
        self.play_button = QPushButton("‚ñ∂ Play")
        self.play_button.setFixedSize(100, 40)
        self.play_button.clicked.connect(self.toggle_playback)
        playback_layout.addWidget(self.play_button)
        
        fade_layout = QHBoxLayout()

        fade_label = QLabel("üéµ Fade:")
        fade_layout.addWidget(fade_label)

        # Bot√µes de preset
        btn_prof = QPushButton("Profissional")
        btn_prof.clicked.connect(lambda: self.apply_fade_preset("professional"))
        fade_layout.addWidget(btn_prof)

        btn_fast = QPushButton("R√°pido")
        btn_fast.clicked.connect(lambda: self.apply_fade_preset("fast"))
        fade_layout.addWidget(btn_fast)

        btn_smooth = QPushButton("Suave")
        btn_smooth.clicked.connect(lambda: self.apply_fade_preset("smooth"))
        fade_layout.addWidget(btn_smooth)

        fade_layout.addStretch()

        main_layout.addLayout(fade_layout)
        
        # Define o layout na janela principal
        central_widget.setLayout(main_layout)

    def apply_fade_preset(self, preset_name):
        """Aplica preset de fade."""
        if hasattr(self, 'queue_manager') and hasattr(self.queue_manager, 'fade_manager'):
            self.queue_manager.fade_manager.apply_preset(preset_name)
            QMessageBox.information(self, "Fade", f"Preset '{preset_name}' aplicado!")
        else:
            QMessageBox.warning(self, "Erro", "Sistema de fade n√£o dispon√≠vel")

    
    def optimize_table_columns(self):
            """
            Otimiza automaticamente o tamanho das colunas baseado no conte√∫do.
            Chama este m√©todo ap√≥s preencher a tabela.
            """
            if self.queue_table.rowCount() == 0:
                return
                
            # Ajusta a coluna "Arquivo" para o conte√∫do
            self.queue_table.resizeColumnToContents(0)
            
            # Garante uma largura m√≠nima para a coluna "Arquivo"
            current_width = self.queue_table.columnWidth(0)
            min_width = 150  # Largura m√≠nima
            max_width = 300  # Largura m√°xima
            
            if current_width < min_width:
                self.queue_table.setColumnWidth(0, min_width)
            elif current_width > max_width:
                self.queue_table.setColumnWidth(0, max_width)
            
            # For√ßa atualiza√ß√£o visual
            self.queue_table.updateGeometry()
            self.queue_table.repaint()
    
    def open_messages_folder(self):

        try:
            import subprocess
            import platform
            
            # Garante que a pasta existe
            if not self.messages_path.exists():
                self.messages_path.mkdir(parents=True, exist_ok=True)
                print(f"Pasta AUDIO criada: {self.messages_path}")
            
            # Converte para caminho absoluto correto
            folder_path = str(self.messages_path.resolve())
            
            print(f"Tentando abrir pasta: {folder_path}")
            
            system = platform.system()
            
            if system == "Windows":
                # Tenta diferentes m√©todos no Windows
                try:
                    # M√©todo 1: Explorer direto
                    result = subprocess.run(['explorer', folder_path], 
                                          capture_output=True, text=True, timeout=3)
                    if result.returncode == 0:
                        print(f"‚úÖ Pasta aberta com sucesso: {folder_path}")
                        return
                except subprocess.TimeoutExpired:
                    # Timeout √© normal - o explorer abre em background
                    print(f"‚úÖ Pasta aberta (timeout normal): {folder_path}")
                    return
                except Exception as e:
                    print(f"M√©todo 1 falhou: {e}")
                
                try:
                    # M√©todo 2: Com /select
                    subprocess.run(['explorer', '/select,', folder_path], 
                                 capture_output=True, text=True, timeout=3)
                    print(f"‚úÖ Pasta aberta com /select: {folder_path}")
                    return
                except subprocess.TimeoutExpired:
                    print(f"‚úÖ Pasta aberta com /select (timeout normal): {folder_path}")
                    return
                except Exception as e:
                    print(f"M√©todo 2 falhou: {e}")
                
                try:
                    # M√©todo 3: Usando start
                    subprocess.run(['cmd', '/c', 'start', folder_path], 
                                 capture_output=True, text=True, timeout=3)
                    print(f"‚úÖ Pasta aberta com start: {folder_path}")
                    return
                except Exception as e:
                    print(f"M√©todo 3 falhou: {e}")
                    
            elif system == "Darwin":  # macOS
                subprocess.run(['open', folder_path], check=True)
            else:  # Linux
                subprocess.run(['xdg-open', folder_path], check=True)
            
            print(f"‚úÖ Comando de abertura enviado para: {folder_path}")
                
        except subprocess.TimeoutExpired:
            # Timeout √© normal para o explorer
            print(f"‚úÖ Pasta AUDIO aberta (timeout normal): {self.messages_path}")
        except FileNotFoundError:
            QMessageBox.information(
                self,
                "Pasta AUDIO",
                f"Explorador n√£o encontrado, mas a pasta existe em:\n\n{self.messages_path}\n\nAbra manualmente no explorador de arquivos."
            )
        except Exception as e:
            QMessageBox.information(
                self,
                "Pasta AUDIO", 
                f"Pasta AUDIO localizada em:\n\n{self.messages_path}\n\nCopie este caminho e abra manualmente no explorador.\n\nDetalhes t√©cnicos: {str(e)}"
            )
    
    def refresh_messages(self):
        """Atualiza a lista de mensagens manualmente."""
        print("Atualizando lista de mensagens...")
        self.load_messages()
        QMessageBox.information(
            self,
            "Lista Atualizada", 
            f"Lista de mensagens atualizada!\nPasta: {self.messages_path}"
        )
    
    def load_messages(self):
        """Carrega a lista de mensagens da pasta AUDIO."""
        self.messages_list.clear()
        
        try:
            # Verifica se a pasta AUDIO existe
            if not self.messages_path.exists():
                self.messages_path.mkdir(parents=True, exist_ok=True)
                print(f"Pasta AUDIO criada: {self.messages_path}")
                
                # Cria arquivo de exemplo/instru√ß√µes
                self.create_audio_folder_info()
            
            # Extens√µes de √°udio suportadas
            audio_extensions = ['.mp3', '.wav', '.aac', '.ogg', '.flac', '.m4a']
            found_files = []
            
            print(f"Procurando arquivos de √°udio em: {self.messages_path}")
            
            # Busca por arquivos de √°udio
            for ext in audio_extensions:
                # Min√∫scula
                for file in self.messages_path.glob(f"*{ext}"):
                    if file.is_file():
                        found_files.append(file)
                        self.messages_list.addItem(file.name)
                
                # Mai√∫scula
                for file in self.messages_path.glob(f"*{ext.upper()}"):
                    if file.is_file() and file not in found_files:
                        found_files.append(file)
                        self.messages_list.addItem(file.name)
            
            # Ordena por nome
            self.messages_list.sortItems()
            
            # Atualiza o label de contagem
            if found_files:
                self.file_count_label.setText(f"üìä {len(found_files)} arquivo(s) encontrado(s)")
                self.file_count_label.setStyleSheet("color: green; font-weight: bold;")
                print(f"‚úÖ {len(found_files)} arquivo(s) de √°udio carregado(s)")
                
                # Lista os primeiros arquivos encontrados
                print("Arquivos encontrados:")
                for i, file in enumerate(found_files[:5], 1):
                    print(f"  {i}. {file.name}")
                if len(found_files) > 5:
                    print(f"  ... e mais {len(found_files) - 5} arquivo(s)")
            else:
                self.file_count_label.setText("üìÇ Pasta vazia - Adicione arquivos de √°udio")
                self.file_count_label.setStyleSheet("color: orange; font-style: italic;")
                print(f"‚ö† Nenhum arquivo de √°udio encontrado em: {self.messages_path}")
                print("Extens√µes suportadas: .mp3, .wav, .aac, .ogg, .flac, .m4a")
                
        except Exception as e:
            error_msg = f"Erro ao carregar mensagens: {str(e)}"
            print(f"‚ùå {error_msg}")
            self.file_count_label.setText("‚ùå Erro ao carregar")
            self.file_count_label.setStyleSheet("color: red; font-weight: bold;")
            QMessageBox.warning(self, "Erro", error_msg)
    
    def create_audio_folder_info(self):
        """Cria um arquivo informativo na pasta AUDIO se ela estiver vazia."""
        try:
            info_file = self.messages_path / "COMO_USAR.txt"
            
            if not info_file.exists():
                info_content = f"""PASTA DE √ÅUDIO - SOUND PLAYER DETEL
========================================

Esta √© a pasta onde voc√™ deve colocar seus arquivos de √°udio.

LOCALIZA√á√ÉO: {self.messages_path}

FORMATOS SUPORTADOS:
‚Ä¢ MP3 (.mp3)
‚Ä¢ WAV (.wav)  
‚Ä¢ AAC (.aac)
‚Ä¢ OGG (.ogg)
‚Ä¢ FLAC (.flac)
‚Ä¢ M4A (.m4a)

COMO USAR:
1. Copie seus arquivos de √°udio para esta pasta
2. No aplicativo, clique "üîÑ Atualizar Lista" para recarregar
3. Ou use "Importar Mensagem" para copiar arquivos
4. Adicione as mensagens √† fila de reprodu√ß√£o

COMANDOS PARA EXECUTAR (Windows):
‚Ä¢ python main.py
‚Ä¢ py main.py

DICAS:
‚Ä¢ Use nomes descritivos para seus arquivos
‚Ä¢ Evite caracteres especiais nos nomes
‚Ä¢ Organize por categorias se necess√°rio

Criado automaticamente pelo Sound Player Detel
Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}
"""
                
                with open(info_file, 'w', encoding='utf-8') as f:
                    f.write(info_content)
                print(f"‚úÖ Arquivo de instru√ß√µes criado: {info_file}")
                
        except Exception as e:
            print(f"‚ö† Erro ao criar arquivo de instru√ß√µes: {str(e)}")
    
    def configure_radio_source(self):
        """CORRIGIDO: Abre o di√°logo para configurar a fonte de r√°dio."""
        if RadioSourceDialog is None:
            QMessageBox.warning(
                self,
                "Fun√ß√£o Indispon√≠vel",
                "O arquivo radio_source_dialog.py n√£o foi encontrado.\n\n"
                "Esta fun√ß√£o est√° temporariamente indispon√≠vel."
            )
            return
            
        try:
            dialog = RadioSourceDialog(self.player_service, self)
            dialog.exec()
            
            # Atualiza o label com a fonte atual
            self.update_source_label()
        except Exception as e:
            QMessageBox.warning(
                self,
                "Erro",
                f"Erro ao abrir configura√ß√£o de fonte:\n{str(e)}"
            )

    def update_source_label(self):
        """Atualiza o label com a fonte atual de r√°dio."""
        try:
            source_name = self.player_service.get_current_source_name()
            self.source_label.setText(f"Fonte: {source_name}")
        except Exception as e:
            print(f"Erro ao atualizar label de fonte: {str(e)}")
            self.source_label.setText("Fonte: Desconhecida")

    def update_status(self):
        """
        Atualiza o status do player.
        OTIMIZADO: Separou a atualiza√ß√£o da tabela para ser mais eficiente.
        """
        # Atualiza estado do player
        state = self.player_service.get_state()
        self.status_label.setText(f"Status: {state}")
        
        # Atualiza o label da fonte atual
        self.update_source_label()
        
        # Atualiza bot√£o de play/pause
        if self.player_service.is_playing:
            self.play_button.setText("‚è∏ Pause")
        else:
            self.play_button.setText("‚ñ∂ Play")
        
        # Atualiza o modo se n√£o estiver no modo de microfone
        if not hasattr(self.player_service, 'mic_active') or not self.player_service.mic_active:
            if self.player_service.is_radio_mode:
                self.mode_label.setText("Modo: R√°dio")
            else:
                if hasattr(self.player_service, 'current_message') and self.player_service.current_message:
                    self.mode_label.setText(f"Modo: Mensagem - {self.player_service.current_message.filename}")
                else:
                    self.mode_label.setText("Modo: Mensagem")

    def update_queue_table(self):
        """
        Atualiza√ß√£o completa da tabela da fila - VERS√ÉO CORRIGIDA.
        """
        # Verificar se estamos fechando
        if self._is_closing or not hasattr(self, 'queue_table'):
            return
            
        items = self.queue_service.get_queue_items()
        
        # Usar blockSignals durante atualiza√ß√£o completa
        self.queue_table.blockSignals(True)
        
        try:
            if not items:
                # Limpa a tabela se n√£o houver itens
                self.queue_table.setRowCount(0)
                return
            
            # Define o n√∫mero de linhas da tabela
            self.queue_table.setRowCount(len(items))
            
            # Hora atual para c√°lculos
            current_time = datetime.now()
            
            # Preenche a tabela com informa√ß√µes atualizadas
            for i, message in enumerate(items):
                # Coluna Arquivo - NOME COMPLETO
                file_item = QTableWidgetItem(message.filename)
                # Destaca mensagens ativas com negrito
                if not message.is_pending:
                    font = file_item.font()
                    font.setBold(True)
                    file_item.setFont(font)
                    file_item.setForeground(QColor(0, 100, 0))  # Verde escuro
                # Tooltip com nome completo
                file_item.setToolTip(f"üìÅ {message.filename}")
                self.queue_table.setItem(i, 0, file_item)
                
                # Coluna Prioridade
                priority_item = QTableWidgetItem(f"P{message.priority}")
                # Cor baseada na prioridade
                if message.priority == 1:
                    priority_item.setForeground(QColor(255, 0, 0))  # Vermelho para P1
                elif message.priority == 2:
                    priority_item.setForeground(QColor(255, 140, 0))  # Laranja para P2
                else:
                    priority_item.setForeground(QColor(0, 100, 255))  # Azul para P3+
                self.queue_table.setItem(i, 1, priority_item)
                
                # Coluna Intervalo
                if message.interval < 1.0:
                    seconds = int(message.interval * 60)
                    interval_text = f"{seconds} seg"
                else:
                    minutes = round(message.interval)
                    interval_text = f"{minutes} min"
                interval_item = QTableWidgetItem(interval_text)
                self.queue_table.setItem(i, 2, interval_item)
                
                # Coluna Pr√≥xima Execu√ß√£o - COM CONTAGEM REGRESSIVA
                delta = message.next_play_time - current_time
                delta_seconds = delta.total_seconds()
                
                if message.is_pending:
                    status_text = "‚è≥ Aguardando vez"
                    color = QColor(128, 128, 128)  # Cinza
                elif delta_seconds <= 0:
                    # J√° passou da hora ou est√° na hora
                    if abs(delta_seconds) < 5:  # Dentro de 5 segundos
                        status_text = "üî¥ TOCANDO AGORA!"
                        color = QColor(255, 0, 0)  # Vermelho
                    else:
                        status_text = "üü¢ PRONTA!"
                        color = QColor(0, 180, 0)  # Verde
                else:
                    # Ainda n√£o chegou a hora - CONTAGEM REGRESSIVA
                    if delta_seconds < 60:
                        # Menos de 1 minuto - s√≥ segundos
                        status_text = f"‚è∞ {int(delta_seconds)}s"
                        color = QColor(255, 140, 0)  # Laranja
                    elif delta_seconds < 3600:
                        # Menos de 1 hora - minutos e segundos
                        minutes = int(delta_seconds // 60)
                        seconds = int(delta_seconds % 60)
                        status_text = f"‚è∞ {minutes}m {seconds}s"
                        color = QColor(0, 100, 255)  # Azul
                    else:
                        # Mais de 1 hora - s√≥ hor√°rio
                        status_text = f"üïê {message.next_play_time.strftime('%H:%M:%S')}"
                        color = QColor(100, 100, 100)  # Cinza escuro
                
                status_item = QTableWidgetItem(status_text)
                status_item.setForeground(color)
                self.queue_table.setItem(i, 3, status_item)
            
            # N√£o chamar optimize_table_columns a cada atualiza√ß√£o
            # Chamar apenas quando necess√°rio (primeira vez ou mudan√ßa significativa)
            if not hasattr(self, '_table_optimized'):
                self.optimize_table_columns()
                self._table_optimized = True
                
        finally:
            # Sempre reativar sinais
            self.queue_table.blockSignals(False)
            
        # Usar update() em vez de repaint()
        self.queue_table.viewport().update()


    def toggle_playback(self):
        """Alterna entre play e pause."""
        try:
            self.player_service.toggle_playback()
            
            if self.player_service.is_playing:
                self.play_button.setText("‚è∏ Pause")
            else:
                self.play_button.setText("‚ñ∂ Play")
        except Exception as e:
            QMessageBox.warning(self, "Erro", f"Erro na reprodu√ß√£o: {str(e)}")

    def paintEvent(self, event):
        """
        Override seguro do paintEvent se houver algum em suas classes.
        """
        # Verificar se estamos fechando
        if hasattr(self, '_is_closing') and self._is_closing:
            return
        
        # Usar super() para chamar implementa√ß√£o pai
        super().paintEvent(event)
    
    def play_selected_message(self, item):
        """Reproduz a mensagem selecionada diretamente."""
        try:
            filename = item.text()
            success = self.player_service.play_message(filename, None)
            
            if success:
                self.mode_label.setText(f"Modo: Mensagem - {filename}")
            else:
                QMessageBox.warning(self, "Erro", f"N√£o foi poss√≠vel reproduzir: {filename}")
        except Exception as e:
            QMessageBox.warning(self, "Erro", f"Erro ao reproduzir mensagem: {str(e)}")
    
    def add_to_queue(self):
        """Adiciona a mensagem selecionada √† fila."""
        current_item = self.messages_list.currentItem()
        if not current_item:
            QMessageBox.warning(self, "Erro", "Selecione uma mensagem para adicionar √† fila.")
            return
        
        try:
            filename = current_item.text()
            
            # Verifica duplicatas
            items = self.queue_service.get_queue_items()
            for item in items:
                if item.filename == filename:
                    QMessageBox.warning(self, "Aviso", 
                        f"A mensagem '{filename}' j√° est√° na fila.")
                    return
            
            dialog = AddMessageDialog(self)
            if dialog.exec():
                priority = dialog.priority_spin.value()
                interval_minutes = dialog.get_interval_in_minutes()
                
                # Adiciona a mensagem √† fila
                message = self.queue_service.add_message(filename, priority, interval_minutes)
                
                if message:
                    # Mostra informa√ß√£o sobre o agendamento usando o intervalo definido
                    interval_seconds = int(interval_minutes * 60)
                    
                    QMessageBox.information(
                        self,
                        "Mensagem Agendada",
                        f"Mensagem '{filename}' adicionada √† fila!\n\n"
                        f"Primeira execu√ß√£o: em {interval_seconds} segundos\n"
                        f"Intervalo entre mensagens: {interval_seconds} segundos"
                    )
                    
                    self.update_queue_table()
                    
        except Exception as e:
            import traceback
            traceback.print_exc()
            QMessageBox.warning(self, "Erro", f"Erro ao adicionar √† fila: {str(e)}")

    
    def remove_from_queue(self):
        """Remove a mensagem selecionada da fila."""
        current_row = self.queue_table.currentRow()
        if current_row >= 0:
            try:
                filename = self.queue_table.item(current_row, 0).text()
                self.queue_service.remove_message(filename)
                self.update_queue_table()
            except Exception as e:
                QMessageBox.warning(self, "Erro", f"Erro ao remover da fila: {str(e)}")
    
    def clear_queue(self):
        """Limpa toda a fila de mensagens."""
        reply = QMessageBox.question(
            self,
            "Limpar Fila",
            "Tem certeza que deseja remover todas as mensagens da fila?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            try:
                self.queue_service.clear_queue()
                self.update_queue_table()
            except Exception as e:
                QMessageBox.warning(self, "Erro", f"Erro ao limpar fila: {str(e)}")
    
    def import_message(self):
        """Abre o di√°logo para importar novas mensagens."""
        try:
            dialog = MessageImportDialog(self.messages_path, self)
            if dialog.exec():
                self.load_messages()
        except Exception as e:
            QMessageBox.warning(self, "Erro", f"Erro ao importar mensagem: {str(e)}")
    
    def remove_message_file(self):
        """Remove o arquivo de mensagem selecionado."""
        current_item = self.messages_list.currentItem()
        if not current_item:
            QMessageBox.warning(self, "Erro", "Selecione uma mensagem para remover.")
            return
        
        filename = current_item.text()
        
        reply = QMessageBox.question(
            self,
            "Remover Arquivo",
            f"Tem certeza que deseja excluir permanentemente o arquivo '{filename}'?\n\nPasta: {self.messages_path}",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            try:
                file_path = self.messages_path / filename
                file_path.unlink()
                
                # Recarrega a lista ap√≥s remover
                self.load_messages()
                
                # Verifica se est√° na fila e remove
                self.queue_service.remove_message(filename)
                self.update_queue_table()
                
                QMessageBox.information(
                    self,
                    "Arquivo Removido",
                    f"Arquivo '{filename}' removido com sucesso!"
                )
                
            except Exception as e:
                QMessageBox.critical(self, "Erro", f"Erro ao remover arquivo: {str(e)}")
    
    def closeEvent(self, event):
        """
        Trata o evento de fechamento da janela - VERS√ÉO CORRIGIDA.
        """
        # Sinalizar que estamos fechando PRIMEIRO
        self._is_closing = True
        
        try:
            print("üîÑ Encerrando aplica√ß√£o...")
            
            # Para os timers PRIMEIRO
            if hasattr(self, 'update_timer'):
                print("‚è∞ Parando timer principal...")
                self.update_timer.stop()
                
            if hasattr(self, 'table_timer'):
                print("üìä Parando timer da tabela...")
                self.table_timer.stop()
            
            # Aguardar um momento para garantir que threads terminem
            QApplication.processEvents()
            
            # Para o gerenciador da fila
            if hasattr(self, 'queue_manager'):
                print("‚èπÔ∏è Parando gerenciador da fila...")
                self.queue_manager.stop()
            
            # NOVO: Salva o estado final com flag de encerramento
            if hasattr(self, 'queue_service') and self.queue_service:
                print("üíæ Salvando estado final com flag de ENCERRAMENTO...")
                self.queue_service.shutdown_save()
            
            # Limpa recursos do player
            if hasattr(self, 'player_service'):
                print("üîß Limpando recursos do player...")
                self.player_service.cleanup()
            
            # Limpa recursos do queue_service
            if hasattr(self, 'queue_service'):
                print("üßπ Limpando recursos do queue_service...")
                self.queue_service.cleanup()
            
            print("‚úÖ Aplica√ß√£o encerrada com sucesso - intervalos ser√£o resetados na pr√≥xima inicializa√ß√£o")
            event.accept()
            
        except Exception as e:
            print(f"‚ùå Erro ao fechar aplica√ß√£o: {str(e)}")
            event.accept()  # Aceita o fechamento mesmo com erro